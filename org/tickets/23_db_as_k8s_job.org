#+TITLE: snoopDB as K8s Job

* The ticket
Setup the db so that it can be run as part of a kubernetes job, whose success or failure is based on the contents of the db.

CONTEXT: We want to check if a k8s release has untested endpoints before its released. This is trivial to do with snoopdb. If we create a k8s job that checks the db for untested endpoints from this release, and passes if there are none and otherwise fails.

To do this, we need to make it so the snoopdb container exits, with either exit status 0 or 1, for pass and fail respectively.

** Iterations
- add customized docker-entrypoint.sh to our container, that is designed to exit instead of continue running.
- customize this entrypoint to pass or fail based on presence of SNOOP_FORCE_FAIL variable
- customize kubernetes job to pass variable to toggle between PASS and FAIL
- customize entrypoint to pass fail depending on list of untested endpoints (we'd expect, without change, for it to pass continually)
- customize dockerfile and db init funtions cto handle env var that passes in a custom bucket/job to choose from
 pass a bucket/job with known untested endpoints, to ensure that the job fails as expected.
* [0/6] Iterations
Each of these will tangle to our manifest/snoodb.yaml file
** [ ] add customized docker-entrypoint.sh to our container, that is designed to exit instead of continue running.
main thing here is updating our docker file, the manifest shouldn't need to change.
Then, adjusting our docker-entrypoint.sh to exit 0 once it's all done
I made a new docker iamge tagged to `job` that brings in our custom entrypoint that just does an 'exit 0' instead of 'exec @a' online 315, so it should stop the container instead of restarting.

#+NAME: forced exit
#+BEGIN_SRC yaml :tangle ../../manifests/snoopdb.yaml
apiVersion: v1
kind: Pod
metadata:
  name: snoopdb
spec:
  containers:
  - name: snoopdb
    image: zachboyofdestiny/snoopdb:job
    ports:
    - name: postgres
      containerPort: 5432
#+END_SRC
** [ ] customize this entrypoint to pass or fail based on presence of SNOOP_FORCE_FAIL variable
** [ ] customize kubernetes job to pass variable to toggle between PASS and FAIL
** [ ] customize entrypoint to pass fail depending on list of untested endpoints (we'd expect, without change, for it to pass continually)
** [ ] customize dockerfile and db init funtions cto handle env var that passes in a custom bucket/job to choose from
** [ ] pass a bucket/job with known untested endpoints, to ensure that the job fails as expected.
